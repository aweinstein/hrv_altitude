import matplotlib.pyplot as plt
from scipy import stats
import pandas as pd

import sp
import vis

def plot_all():
    hrv = pd.read_pickle('dfs/hrv.pkl') # hrv.pickle is generated by parse_data.py
    hrv_filtered = sp.remove_outliers_all(hrv)
    hrv_5m = sp.extract_segment(hrv_filtered)

    plt.close('all')
    vis.plot_RR(hrv)
    plt.savefig('figures/rr_raw.png')
    plt.savefig('figures/rr_raw.pdf')

    vis.plot_RR(hrv_filtered)
    plt.savefig('figures/rr_filtered.png')
    plt.savefig('figures/rr_filtered.pdf')

    vis.plot_HR(hrv_filtered)
    plt.savefig('figures/hr_filtered.png')
    plt.savefig('figures/hr_filtered.pdf')

    vis.plot_RR(hrv_5m)
    plt.savefig('figures/rr_5min.png')
    plt.savefig('figures/rr_5min.pdf')

    vis.plot_HR(hrv_5m)
    plt.savefig('figures/hr_5min.png')
    plt.savefig('figures/hr_5min.pdf')


def run_test(metrics, var, test_fun):

    var_1 = metrics.loc[metrics['height']==1, var]
    var_2 = metrics.loc[metrics['height']==4, var]

    _, p = test_fun(var_1, var_2)

    return p

if __name__ == '__main__':
    #plot_all()
    #run_stats()
    metrics = pd.read_pickle('dfs/metrics.pkl').reset_index()
    cols = metrics.columns[2:]

    ps_rel = [run_test(metrics, col, stats.ttest_rel) for col in cols]
    tests_rel = pd.DataFrame(ps_rel, cols, ['p-value'])

    ps_ind = [run_test(metrics, col, stats.ttest_ind) for col in cols]
    tests_ind = pd.DataFrame(ps_ind, cols, ['p-value'])

    print('Independent t-test')
    print(tests_ind)
    print('\nRelative t-test')
    print(tests_rel)
